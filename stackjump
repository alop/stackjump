#!/bin/bash


# password hash to set for 'ubuntu' user account on install
# default set to 'none' spelled out
MYPASSWD='$6$Cjxz1rgM$ahShoUXrRY0qabPBMuFSmxRcwqkA2BRmb0B9Dlkzd5BfiunORoayXm3RZCEAsauW50JES9v1GTkkurnXmv8Ey0'
KNIFE_PASSWD='mypassword'
NODE_NAME='myjumpnode'

# as of 11/05/13 these are the lastest versions
CHEF_CLIENT_VER="11.8.0-1"
CHEF_SERVER_VER="11.0.8-1"

WHOAMI=`whoami`
if [ $WHOAMI != "root" ]; then
  echo "Must be run as sudo root"
  exit 1
fi

USAGE="$0 options
  -d dry run don't create iso
  -c chef repo dir
  -a architecture [i386|amd64]
  -r release_codename (oneiric, natty, maverick, etc)
  -v release_version
  -rl chef run list for jump node (comma delimited)
  -o output iso
  -V verbose
  -k keep tmp dir"

while [ $1 ];do
  case $1 in
    -d) shift
        DRYRUN=1;;
    -c) shift
        CHEFREPO=$1;;
    -a) shift
        ARCH=$1;;
    -r) shift
        REL=$1;;
    -v) shift
        VER=$1;;
    -o) shift
        ISO=$1;;
    -rl) shift
         CHEFRUNLIST=$1;;
    -k) shift
        KEEP=1;;
    -V) shift
        VERBOSE=1;;
    *) echo "$USAGE" && exit 1;;
  esac
  shift
done

echo -e "\n## This tool should only be run on a Linux workstation ##"
echo "## This code is customized for AT&T environment usage only ##"
echo -e "## So far only tested on Precise Pangolin 12.04.3 x64 ##\n"

sleep 2

TMPDIR="/tmp/stackjump"
if [ ! $REL ]; then
  REL='precise'
fi

ISODIR="$TMPDIR/ISO"
INITRD="$TMPDIR/initrd"
DOWNLOADS="$TMPDIR/DOWNLOADS"

if [ ! -d $TMPDIR ]; then
  mkdir -p $TMPDIR
fi

if [ ! -d "$DOWNLOADS" ]; then
  mkdir -p "$DOWNLOADS"
fi

if [ ! -d $ISODIR ]; then
  mkdir -p $ISODIR
fi

if [ ! -d $INITRD ]; then
  mkdir -p $INITRD
fi

## SANITY CHECKS ##

for BIN in fakeroot cpio mkisofs curl; do 
  if [ ! `which $BIN` ]; then
    echo "$BIN needs to be installed to run stackjump" && exit 1
  fi
done

if [ ! $ISO ]; then
  ISO='custom.iso'
fi

if [ ! $ARCH ]; then
  ARCH=`arch`
fi

case $ARCH in
  'i686') ARCH='i386';;
  'x86_64') ARCH='amd64';;
esac

if [ $ARCH != 'i386' ] && [ $ARCH != 'amd64' ]; then
  echo "Architecture $ARCH is not valid.  (amd64|i386)" && exit 1
fi

if [ ! $VER]; then
  VER='12.04.3'
fi
DISTURL="http://releases.ubuntu.com"
ISONAME="ubuntu-$VER-server-$ARCH.iso"
ISOURL="$DISTURL/$REL/$ISONAME"

HEAD=`curl -s --head $ISOURL|head -1`
HCODE=`expr "$HEAD" : 'HTTP\/... \(...\) '`
if [ "$HCODE" != '200' ]; then
  echo "Release $REL invalid."
  echo "Check $ISOURL to make sure a valid release codename" && exit 1
fi

### MAKING THE ISO ##
if [ -f "$DOWNLOADS/$ISONAME" ]; then
  echo -e "\n$DOWNLOADS/$ISONAME exists - skipping download\n"
else
  echo -e "\nDownloading $ISOURL to $DOWNLOADS/$ISONAME\n"
  curl $ISOURL -o $DOWNLOADS/$ISONAME
fi

MOUNTDIR="$TMPDIR/mount"
if [ ! -d $MOUNTDIR ]; then
  mkdir -p $MOUNTDIR
fi
if [ -d $MOUNTDIR/isolinux ]; then
  echo -e "\nISO already mounted $MOUNTDIR - skipping mount\n"
else
  echo -e "\nMounting to $MOUNTDIR...\n"
  mount -o loop $DOWNLOADS/$ISONAME $MOUNTDIR
fi
echo -e "\nCopying contents of $ISONAME to $ISODIR\n"
sleep 2
if [ $VERBOSE ]; then
  rsync -av $MOUNTDIR/ $ISODIR/
else
  rsync -av $MOUNTDIR/ $ISODIR/ > /dev/null 2>&1
fi


if [ $VERBOSE ]; then
  (cd $INITRD && gunzip -c $MOUNTDIR/install/initrd.gz| fakeroot cpio -id )
else
  (cd $INITRD && gunzip -c $MOUNTDIR/install/initrd.gz| fakeroot cpio -id ) > /dev/null 2>&1
fi

echo -e "\nCUSTOMIZING ISOLINUX.cfg\n"
cat>"$ISODIR/isolinux/isolinux.cfg"<<EOF
  prompt 0
  timeout 2
  menu hshift 13
  menu width 49
  menu margin 8
  default autoinstall
  
  label autoinstall
  MENU LABEL AUTOMATED INSTALL
  kernel /install/vmlinuz
  append auto ramdisk_size=14984 initrd=/install/initrd.gz vga=normal DEBCONF_DEBUG=5
EOF

echo -e "\nINJECTING PRESEED AND CUSTOM SCRIPTS\n"

cp preseed.cfg $INITRD
sed -i "s/MYPASSWD/$MYPASSWD/g" $INITRD/preseed.cfg

EXTRAS="$INITRD/extras"
if [ ! -d $EXTRAS/root/.ssh ]; then
  mkdir -p $EXTRAS/root/.ssh
fi
if [ ! -d $EXTRAS/home/ubuntu/.ssh ]; then
  mkdir -p $EXTRAS/home/ubuntu/.ssh
fi
cp first_run.sh late_command.sh knife_first_run $INITRD/extras/root
cp authorized_keys $EXTRAS/root/.ssh/authorized_keys
cp authorized_keys $EXTRAS/home/ubuntu/.ssh
sed -i "s/MYPASSWORD/$KNIFE_PASSWD/g" $EXTRAS/root/knife_first_run
sed -i "s/MYJUMPNODE/$NODE_NAME/g" $EXTRAS/root/knife_first_run

# DOWNLOAD LATEST CHEF OMNIBUS PACKAGES
if [ ! -d $ISODIR/extras ] ; then
  mkdir $ISODIR/extras
fi

OMNIBUS_URL="https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu"
IFS=. read -r maj min _ <<< "$VER"
OMNI_VER="$maj.$min"
# Only available in x86_64
OMNI_ARCH="x86_64"  
CHEFCLIENT="chef_$CHEF_CLIENT_VER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFC_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFCLIENT"
if [ -f $DOWNLOADS/$CHEFCLIENT ]; then
  echo -e "\n$DOWNLOADS/$CHEFCLIENT exists - skipping chef client download\n"
else
  echo -e "\nDownloading CHEF-CLIENT OMNIBUS $DOWNLOADS/$CHEFCLIENT\n"
  curl $CHEFC_URL -o $DOWNLOADS/$CHEFCLIENT
fi
cp $DOWNLOADS/$CHEFCLIENT $ISODIR/extras/$CHEFCLIENT

CHEFSERVER="chef-server_$CHEF_SERVER_VER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFS_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFSERVER"
if [ -f $DOWNLOADS/$CHEFSERVER ]; then
  echo -e "\n$DOWNLOADS/$CHEFSERVER exists - skipping chef server download\n"
else
  echo -e "\nDownloading CHEF-SERVER OMNIBUS $DOWNLOADS/$CHEFSERVER\n"
  curl $CHEFS_URL -o $DOWNLOADS/$CHEFSERVER
fi
cp $DOWNLOADS/$CHEFSERVER $ISODIR/extras/$CHEFSERVER

## IMPORT THE CHEF REPO
MYCHEFREPO="$ISODIR/extras/chef-repo"
if [ ! -d $MYCHEFREPO ]; then
  mkdir -p $MYCHEFREPO/cookbooks $MYCHEFREPO/roles
fi
if [ ! -z $CHEFREPO ] && [ -d $CHEFREPO ]; then
  echo -e "\nCOPYING EXTRAS $CHEFREPO...\n"
  sleep 2
  if [ $VERBOSE ]; then
    rsync -av $CHEFREPO/ $MYCHEFREPO/
  else
    rsync -av $CHEFREPO/ $MYCHEFREPO/ > /dev/null 2>&1
  fi
fi

BASE_COOKBOOKS="chef-client logrotate cron"
for i in $BASE_COOKBOOKS; do
  COOKBOOKD="$MYCHEFREPO/cookbooks/$i"
  if [ ! -f "$COOKBOOKD/README.md" ]; then
    if [ ! -d "$COOKBOOKD" ]; then
      mkdir -p $COOKBOOKD
    fi
    if [ -f "$DOWNLOADS/$i/README.md" ]; then
      echo -e "\n$DOWNLOADS/$i cookbook already exists - skipping download\n"
    else
      echo -e "\nDownloading $i cookbook from github\n"
      OUTPUT=`(cd $TMPDIR; curl -kLs https://github.com/opscode-cookbooks/$i/tarball/master | tar -zxv)`
      DLTMP="$TMPDIR/`echo $OUTPUT|awk '{print $1}'`"
      mv $DLTMP $DOWNLOADS/$i
    fi
    if [ $VERBOSE ]; then
      rsync -av $DOWNLOADS/$i/ $COOKBOOKD/
    else
      rsync -av $DOWNLOADS/$i/ $COOKBOOKD/ > /dev/null 2>&1
    fi
  else
    echo -e "\n$COOKBOOKD cookbook already exists - skipping download\n"
  fi
done

echo -e "\nBUILDING INITRD.GZ...\n"
# make the new initrd.gz
if [ $VERBOSE ]; then
  (cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/install/initrd.gz)
else
  (cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/install/initrd.gz) > /dev/null 2>&1
fi

# CREATE ISO
if [ $DRYRUN ]; then
  echo -e "\nDRYRUN - skipping ISO creation\n"
else
  echo -e "\nBUILDING THE ISO IMAGE...\n"
  sleep 2
  if [ $VERBOSE ]; then
    mkisofs -r -V "Custom Auto Ubuntu Install" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
  else
    mkisofs -quiet -r -V "Custom Auto Ubuntu Install" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
  fi
fi

# CLEANUP
if [ ! $KEEP ]; then
  umount $MOUNTDIR
  rm -rf $INITRD $ISODIR $MOUNTDIR
fi

if [ ! -f $ISO ]; then
  echo "Create ISO failed." && exit 1
else
  if [ $DRYRUN ]; then
    echo -e "\nsuccessfully completed\n" && exit 0
  else
    echo -e "\n$ISO successfully created\n" && exit 0
  fi
fi
