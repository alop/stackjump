#!/bin/bash

echo "\n## This tool should only be run on a Linux workstation ##"
echo "## This code is customized for AT&T environment usage only ##"
echo "## So far only tested on Precise Pangolin 12.04.3 x64 ##\n"

# password hash to set for ubuntu user account on install
MYPASSWD='$6$Cjxz1rgM$ahShoUXrRY0qabPBMuFSmxRcwqkA2BRmb0B9Dlkzd5BfiunORoayXm3RZCEAsauW50JES9v1GTkkurnXmv8Ey0'
KNIFE_PASSWD='mypassword'
NODE_NAME='myjumpnode'

# as of 11/05/13 these are the lastest versions
CHEF_CLIENT_VER="11.8.0-1"
CHEF_SERVER_VER="11.0.8-1"

WHOAMI=`whoami`
if [ $WHOAMI != "root" ]; then
  echo "Must be run as sudo root"
  exit 1
fi

USAGE="$0 options
  -d dry run don't create iso
  -c chef repo dir
  -a architecture [i386|amd64]
  -r release_codename (oneiric, natty, maverick, etc)
  -v release_version
  -rl chef run list for jump node (comma delimited)
  -o output iso
  -k keep tmp dir"

while [ $1 ];do
  case $1 in
    -d) shift
        DRYRUN=1;;
    -c) shift
        CHEFREPO=$1;;
    -a) shift
        ARCH=$1;;
    -r) shift
        REL=$1;;
    -v) shift
        VER=$1;;
    -o) shift
        ISO=$1;;
    -rl) shift
         CHEFRUNLIST=$1;;
    -k) shift
        KEEP=1;;
    *) echo "$USAGE" && exit 1;;
  esac
  shift
done

TMPDIR="/tmp/stackjump"
if [ ! $REL ]; then
  REL='precise'
fi

ISODIR="$TMPDIR/ISO"
INITRD="$TMPDIR/initrd"

if [ ! -d $TMPDIR ]; then
  mkdir -p $TMPDIR
fi

if [ ! -d $ISODIR ]; then
  mkdir -p $ISODIR
fi

if [ ! -d $INITRD ]; then
  mkdir -p $INITRD
fi

## SANITY CHECKS ##

for BIN in fakeroot cpio mkisofs curl; do 
  if [ ! `which $BIN` ]; then
    echo "missing $BIN - Attempting to install"
    apt-get -q -y install $BIN
  fi
done

if [ ! $ISO ]; then
  ISO='custom.iso'
fi

if [ ! $ARCH ]; then
  ARCH=`arch`
fi

case $ARCH in
  'i686') ARCH='i386';;
  'x86_64') ARCH='amd64';;
esac

if [ $ARCH != 'i386' ] && [ $ARCH != 'amd64' ]; then
  echo "Architecture $ARCH is not valid.  (amd64|i386)" && exit 1
fi

if [ ! $VER]; then
  VER='12.04.3'
fi
DISTURL="http://releases.ubuntu.com"
ISONAME="ubuntu-$VER-server-$ARCH.iso"
ISOURL="$DISTURL/$REL/$ISONAME"

HEAD=`curl -s --head $ISOURL|head -1`
HCODE=`expr "$HEAD" : 'HTTP\/... \(...\) '`
if [ "$HCODE" != '200' ]; then
  echo "Release $REL invalid."
  echo "Check $ISOURL to make sure a valid release codename" && exit 1
fi

### MAKING THE ISO ##
if [ -f "$TMPDIR/$ISONAME" ]; then
  echo "$TMPDIR/$ISONAME exists - skipping download"
else
  echo "Downloading $ISOURL to $TMPDIR/$ISONAME"
  curl $ISOURL -o $TMPDIR
fi

MOUNTDIR="$TMPDIR/mount"
if [ ! -d $MOUNTDIR ]; then
  mkdir -p $MOUNTDIR
fi
if [ -d $MOUNTDIR/isolinux ]; then
  echo "ISO already mounted $MOUNTDIR - skipping mount"
else
  echo "Mounting to $MOUNTDIR..."
  mount -o loop $TMPDIR/$ISONAME $MOUNTDIR
fi
echo "Copying contents of $ISONAME to $ISODIR"
rsync -av $MOUNTDIR/ $ISODIR/

(cd $INITRD && gunzip -c $MOUNTDIR/install/initrd.gz| fakeroot cpio -id )

echo "CUSTOMIZING ISOLINUX.cfg"
cat>"$ISODIR/isolinux/isolinux.cfg"<<EOF
  prompt 0
  timeout 2
  menu hshift 13
  menu width 49
  menu margin 8
  default autoinstall
  
  label autoinstall
  MENU LABEL AUTOMATED INSTALL
  kernel /install/vmlinuz
  append auto ramdisk_size=14984 initrd=/install/initrd.gz vga=normal DEBCONF_DEBUG=5
EOF

echo "INJECTING PRESEED AND CUSTOM SCRIPTS"

cat>"$INITRD/preseed.cfg"<<EOF
d-i debian-installer/locale string en_US
d-i console-setup/ask_detect boolean false
d-i console-setup/layoutcode string us
d-i keyboard-configuration/layoutcode string us
d-i netcfg/link_detection_timeout string 3
d-i netcfg/disable_dhcp boolean true
d-i netcfg/dhcp_timeout string 1
d-i netcfg/dhcp_failed note
d-i netcfg/dhcp_options select Configure network manually
d-i netcfg/confirm_static boolean true
d-i netcfg/get_nameservers string 8.8.8.8
d-i netcfg/get_ipaddress string 172.16.199.199
d-i netcfg/get_netmask string 255.255.255.255
d-i netcfg/get_gateway string 172.16.199.199
d-i netcfg/get_hostname string jumpserver
d-i netcfg/get_domain string mydomain.com
d-i netcfg/get_hostname seen true 
d-i time/zone string UTC
d-i clock-setup/ntp boolean fales
#d-i clock-setup/ntp-server string time.apple.com
d-i clock-setup/utc boolean true
#d-i mirror/country string manual
#d-i mirror/http/hostname string us.archive.ubuntu.com
#d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string
d-i partman-auto/method string regular
d-i partman-auto/purge_lvm_from_device boolean true
d-i partman-lvm/confirm boolean true
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-auto/choose_recipe select atomic
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman-auto/disk string /dev/sda
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman-md/confirm boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i passwd/root-login boolean false
d-i passwd/user-fullname string Ubuntu User
d-i passwd/username string ubuntu
d-i passwd/user-password-crypted password $MYPASSWD
d-i user-setup/encrypt-home boolean false
d-i pkgsel/include string openssh-server curl vim
d-i pkgsel/update-policy select none
bootstrap-base	base-installer/kernel/image	select	linux-generic-lts-raring
d-i pkgsel/install-language-support boolean false
tasksel tasksel/first multiselect standard, openssh-server
openssh-server ssh/new_config  boolean true
openssh-server ssh/use_old_init_script boolean true
openssh-server ssh/protocol2_only boolean true
openssh-server ssh/run_sshd boolean true
d-i preseed/late_command string cp -ar /extras/* /target; in-target chmod 755 /root/late_command.sh; in-target sh /root/late_command.sh; 
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i finish-install/reboot_in_progress note
EOF

EXTRAS="$INITRD/extras/root"
if [ ! -d $EXTRAS/root/.ssh ]; then
  mkdir -p $EXTRAS/root/.ssh
fi
cp first_run.sh late_command.sh knife_first_run $INITRD/extras/root
cp authorized_keys $INITRD/extras/root/.ssh
sed -i "s/MYPASSWORD/$KNIFE_PASSWD/g" $INITRD/extras/root/knife_first_run
sed -i "s/MYJUMPNODE/$NODE_NAME/g" $INITRD/extras/root/knife_first_run

# DOWNLOAD LATEST CHEF OMNIBUS PACKAGES
if [ ! -d $ISODIR/extras ] ; then
  mkdir $ISODIR/extras
fi

OMNIBUS_URL="https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu"
IFS=. read -r maj min _ <<< "$VER"
OMNI_VER="$maj.$min"
# Only available in x86_64
OMNI_ARCH="x86_64"  
CHEFCLIENT="chef_$CHEF_CLIENT_VER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFC_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFCLIENT"
if [ -f $ISODIR/extras/$CHEFCLIENT ]; then
  echo "$ISODIR/extras/$CHEFCLIENT exists - skipping chef client download"
else
  curl $CHEFC_URL -o $ISODIR/extras/$CHEFCLIENT
fi
CHEFSERVER="chef-server_$CHEF_SERVER_VER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFS_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFSERVER"
if [ -f $ISODIR/extras/$CHEFSERVER ]; then
  echo "$ISODIR/extras/$CHEFSERVER exists - skipping chef server download"
else
  curl $CHEFS_URL -o $ISODIR/extras/$CHEFSERVER
fi

## IMPORT THE CHEF REPO
MYCHEFREPO="$ISODIR/extras/chef-repo"
if [ ! -d $MYCHEFREPO ]; then
  mkdir -p $MYCHEFREPO/cookbooks $MYCHEFREPO/roles
fi
if [ ! -z $CHEFREPO ] && [ -d $CHEFREPO ]; then
  echo "COPYING EXTRAS $CHEFREPO..."
  rsync -av $CHEFREPO/ $MYCHEFREPO/
fi

CHEFCLIENTD=$MYCHEFREPO/cookbooks/chef-client
if [ ! -f $CHEFCLIENTD/README.md ]; then
  if [ ! -d $CHEFCLIENTD ]; then
    mkdir -p $CHEFCLIENTD
  fi
  echo "Downloading chef-client cookbook from github"
  OUTPUT=`(cd $TMPDIR; curl -kLs https://github.com/opscode-cookbooks/chef-client/tarball/master | tar -zxv)`
  DLTMP="$TMPDIR/`echo $OUTPUT|awk '{print $1}'`"
  rsync -av $DLTMP/ $CHEFCLIENTD/
else
  echo "Chef-client cookbook already exists - skipping download"
fi

echo "Making the ISO..."
# make the new initrd.gz
(cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/install/initrd.gz)

# CREATE ISO
if [ $DRYRUN ]; then
  echo "DRYRUN - skipping ISO creation"
else
  mkisofs -r -V "Custom Auto Ubuntu Install" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
fi

umount $MOUNTDIR
if [ ! -f $ISO ]; then
  echo "Create ISO failed." && exit 1
else
  if [ $DRYRUN ]; then
    echo "successfully completed" && exit 0
  else
    echo "$ISO successfully created" && exit 0
  fi
fi
