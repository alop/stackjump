#!/bin/sh

SKELURL="http://github.com/jhtran/stackjump_skeleton"
PRESURL='https://raw.github.com/jhtran/stackjump_skeleton/master/preseed.cfg'
DISTURL="http://us.archive.ubuntu.com/ubuntu/dists"
USAGE="$0 options
  -p preseed (or use [-d|-g] but -p will take precedence)
       You can grab the example preseed from
       $PRESURL 
  -d directory (preseed.cfg must exist in dir root)
  -g github repo (must be github hosted)
  -a architecture [i386|amd64]
  -r release_codename (lsb_release -c)
  -o <file> Write output to <file> instead of custom.iso
  -k keep tmp dir

  See $SKELURL"

## EXAMPLE PRESEED TEMPLATE

DEF_INT="d-i netcfg/choose_interface select @@ETHSTUB@@"
DEF_HOSTN="d-i netcfg/get_hostname string @@HOSTNSTUB@@"
DEF_DOMN="d-i netcfg/get_domain string @@DOMNSTUB@@"
DEF_ROOTPW="d-i passwd/root-password-crypted password @@PWSTUB@@"
DEF_STATIC=`cat<<EOF
d-i netcfg/disable_dhcp boolean true
d-i netcfg/confirm_static boolean true
d-i netcfg/dhcp_timeout string 1
d-i netcfg/dhcp_failed note
d-i netcfg/dhcp_options select Configure network manually
d-i netcfg/get_nameservers string @@DNSSTUB@@
d-i netcfg/get_ipaddress string @@IPSTUB@@
d-i netcfg/get_netmask string @@MASKSTUB@@
d-i netcfg/get_gateway string @@GWSTUB@@
d-i netcfg/confirm_static boolean true
EOF`

TEMPLATE=`cat<<EOF
d-i debian-installer/locale string en_US
d-i console-setup/ask_detect boolean false
d-i console-setup/layoutcode string us
d-i time/zone string UTC
d-i clock-setup/ntp boolean true
d-i clock-setup/ntp-server string pool.ntp.org
d-i clock-setup/utc boolean true
d-i keyboard-configuration/layoutcode string us
d-i mirror/country string manual
d-i mirror/http/hostname string us.archive.ubuntu.com
d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string
d-i partman-auto/method string regular
d-i partman-auto/purge_lvm_from_device boolean true
d-i partman-lvm/confirm boolean true
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-auto/choose_recipe select atomic
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman-auto/disk string /dev/sda
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman-md/confirm boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i apt-setup/local0/repository string deb http://apt.opscode.com/ oneiric-0.10 main
d-i apt-setup/local0/comment string opscode server
d-i apt-setup/local0/source boolean true
d-i apt-setup/local0/key string http://apt.opscode.com/packages@opscode.com.gpg.key
d-i passwd/root-login boolean true
d-i passwd/make-user boolean false
d-i pkgsel/include string openssh-server curl git ruby1.9.1 vim vlan ifenslave rubygems1.9.1 chef
d-i pkgsel/update-policy select none
tasksel tasksel/first multiselect standard, openssh-server
openssh-server ssh/new_config  boolean true
openssh-server ssh/use_old_init_script boolean true
openssh-server ssh/protocol2_only boolean true
openssh-server ssh/run_sshd boolean true
chef	chef/chef_server_url	string	http://127.0.0.1:4000
d-i preseed/late_command string cp -ar /root_skel/* /target; in-target chmod 755 /root/late_command.sh; in-target sh /root/late_command.sh; 
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i finish-install/reboot_in_progress note
EOF`


interr() {
  echo "Invalid selection" && exit 1
}

netsummary() {
  echo ""
  echo "** SUMMARY **"
  echo ""
  echo "Ethernet device: $ETHCHOICE"
  echo "IP Address: $IP"
  echo "Subnet mask: $MASK"
  echo "Gateway: $GW"
  echo "DNS Server: $DNS"
  echo "Hostname: $HOSTNCHOICE"
  echo "Domain: $DOMNCHOICE"
  echo "Is this correct?  (Y|N)"
  read CORR
  case $CORR in
    Y|y) ;;
    N|n|*) echo "Aborting!" && exit 1
  esac
}

pwinteract() {
  echo "root password (default 'mypassword'):"
  read PWCHOICE
  if [ ! $PWCHOICE ]; then
    PWCHOICE='mypassword'
  else
    echo "re-enter:"
    read PWCHOICE2
    if [ ! $PWCHOICE2 ] || [ $PWCHOICE != $PWCHOICE2 ]; then
      echo "Password did not match" && interr
    fi
  fi
  PWHASH=`printf "$PWCHOICE" | mkpasswd -s -m md5`
  ROOTPW=`echo $DEF_ROOTPW|sed "s,@@PWSTUB@@,$PWHASH,"`
}

netinteract() {
  echo "Ethernet Interface (default auto):"
  read ETHCHOICE
  if [ ! $ETHCHOICE ]; then
    ETHCHOICE='auto'
  fi
  ETH=`echo $DEF_INT|sed 's,@@ETHSTUB@@,$ETHCHOICE,'`
  echo "(D)HCP or (s)tatic network? (default DHCP)":
  read NET
  case $NET in
    s|S) 
      echo "IP address:"
      read IP
      if [ ! $IP ]; then
        interr
      fi
      echo "Subnet mask:"
      read MASK
      if [ ! $MASK ]; then
        interr
      fi
      echo "Gateway:"
      read GW
      if [ ! $GW ]; then
        interr
      fi
      echo "DNS Server (default 8.8.8.8):"
      read DNS
      if [ ! $DNS ]; then
        DNS='8.8.8.8'
      fi
      NET=`echo "$DEF_STATIC"|sed "s,@@IPSTUB@@,$IP,"|sed "s,@@MASKSTUB@@,$MASK,"|sed "s,@@GWSTUB@@,$GW,"|sed "s,@@DNSSTUB@@,$DNS,"`
      echo "Hostname (optional):"
      read HOSTNCHOICE
      if [ ! $HOSTNCHOICE ]; then
        HOSTNCHOICE='unassigned_node'
      fi
      HOSTN=`echo $DEF_HOSTN|sed "s,@@HOSTNSTUB@@,$HOSTNCHOICE,"`
      echo "Domain (optional):"
      read DOMNCHOICE
      if [ ! $DOMNCHOICE ]; then
        DOMNCHOICE='unassigned_domain'
      fi
      DOMN=`echo $DEF_DOMN|sed "s,@@DOMNSTUB@@,$DOMNCHOICE,"`
      netsummary
      ;;
    d|D|*) NET="";;
  esac
}

if [ ! $1 ]; then
  echo "Creating basic preseed.."
  netinteract
  pwinteract
  echo "$NET" > preseed.cfg
  echo "$ROOTPW" >> preseed.cfg
  echo "$TEMPLATE" >> preseed.cfg
  echo "preseed created `pwd`/preseed.cfg"
  exit
else
  while [ $1 ];do
    case $1 in
      -p) shift
          PFILE=$1;;
      -d) shift
          CDIR=$1;;
      -g) shift
          GITH=$1;;
      -a) shift
          ARCH=$1;;
      -r) shift
          REL=$1;;
      -o) shift
          ISO=$1;;
      -k) KEEP=1;;
      -t) TEST=1;;
      *) echo "$USAGE" && exit 1;;
    esac
    shift
  done
fi

DATETIME=`date +%m%d%y%H%M`
TMPDIR="/tmp/$DATETIME"
ISODIR="$TMPDIR/ISO"
INITRD="$TMPDIR/initrd"
mkdir -p $ISODIR $INITRD
if [ $? != 0 ]; then
  echo "Unable to create tmpdir $TMPDIR subdir(s)" && exit
fi

## SANITY CHECKS ##

if [ ! $PFILE ] && [ ! $CDIR ] && [ ! $GITH ]; then
  echo "$USAGE" && exit 1
fi
if ([ $GITH ] && [ $CDIR ]) ; then
  echo "Use only one of the -d or -g flags." && exit 1
fi
if [ $PFILE ]; then
  if [ ! -f $PFILE ]; then
    echo "$PFILE not a valid preseed file" && exit 1
  else
    PRESEED=$PFILE
    SEED_WARN="contains a preseed.cfg but -p $PRESEED takes precedence"
  fi
fi

if [ $CDIR ]; then
  if [ ! -d $CDIR ]; then
    echo "Directory $CDIR invalid" && exit 1
  else
    if [ $PFILE ]; then 
      echo "Warning: $CDIR $SEED_WARN"
    else
      PRESEED="$CDIR/preseed.cfg"
      if [ ! -f $PRESEED ]; then
        echo "$CDIR/preseed.cfg doesn't exist" && exit 1
      fi
    fi
  fi
fi

if [ ! $ISO ]; then
  ISO='custom.iso'
fi

if [ ! $ARCH ]; then
  ARCH=`arch`
fi
case $ARCH in
  'i686') ARCH='i386';;
  'x86_64') ARCH='amd64';;
esac
if [ $ARCH != 'i386' ] && [ $ARCH != 'amd64' ]; then
  echo "Architecture $ARCH is not valid.  (amd64|i386)" && exit 1
fi

if [ ! $REL ]; then
    REL='natty'
fi
RELURL="$DISTURL/$REL/"
HEAD=`curl -s --head $RELURL|head -1`
HCODE=`expr "$HEAD" : 'HTTP\/... \(...\) '`
if [ "$HCODE" != '200' ]; then
  echo "Release $REL invalid."
  echo "Check $DISTURL to make sure a valid release codename" && exit 1
fi

if [ $GITH ]; then
  GITNAME=`expr $GITH : 'git@github.com:\(.*\).git'`
  if [ ! $GITNAME ]; then
    echo "$GITH invalid github repo.  (Should be git@github.com:username/repo.git)" && exit 1
  fi
  echo "Exporting github repo..."
  OUTPUT=`(cd $TMPDIR ; curl -kLs https://github.com/$GITNAME/tarball/master|tar -zxv)`
  GITDIR="$TMPDIR/`echo $OUTPUT|awk '{print $1}'`"
  if [ ! $GITDIR ]; then
    echo "Unable to download repo tarball" && exit 1
  fi
  CDIR=$GITDIR
  if [ $PFILE ]; then
    echo "Warning: $GITH $SEED_WARN"
  else
    PRESEED="$GITDIR/preseed.cfg"
    if [ ! -f $PRESEED ]; then
        echo "$GITDIR/preseed.cfg doesn't exist" && exit 1
    fi
  fi
fi

## MAKING THE ISO ##
echo "Downloading linux files.."
FURL="${RELURL}main/installer-${ARCH}/current/images/netboot/ubuntu-installer/$ARCH"
# let me know if you find a better url for isolinux.bin
BURL="http://slackware.osuosl.org/slackware-current/isolinux/isolinux.bin"
if [ $TEST ]; then
  touch $ISODIR/linux
  touch $ISODIR/isolinux.bin
  TESTUB=$TMPDIR/testub
  echo $FURL >> $TESTUB
else
  curl $FURL/linux -o $ISODIR/linux
  if [ ! -f $ISODIR/linux ]; then
    echo "Unable to download linux" && exit 1
  fi
  (cd $INITRD && curl $FURL/initrd.gz| gzip -dc|fakeroot cpio -id )
  if [ ! -f $INITRD/init ]; then
    echo "Unable to download initrd.gz" && exit 1
  fi
  curl $BURL -o $ISODIR/isolinux.bin
fi

cat>"$ISODIR/isolinux.cfg"<<EOF
prompt 0
timeout 2
menu hshift 13
menu width 49
menu margin 8
default autoinstall

label autoinstall
MENU LABEL AUTOMATED INSTALL
kernel linux
append auto ramdisk_size=14984 initrd=initrd.gz vga=normal DEBCONF_DEBUG=5
EOF

cp $PRESEED "$INITRD/preseed.cfg"
ROOTD="$INITRD/root_skel/root"
CHEFS="$ROOTD/chef-solo/cookbooks/chef-server"
mkdir -p $CHEFS/files/default $CHEFS/recipes
(cd $CDIR ; cp -arp * $INITRD/root_skel)

if [ ! -f $ROOTD/chef-solo/solo.rb ]; then
  cat>$ROOTD/chef-solo/solo.rb<<EOF
file_cache_path "/root/chef-solo"
cookbook_path "/root/chef-solo/cookbooks"
EOF
fi

if [ ! -f $ROOTD/chef-solo/solo.json ]; then
  cat>$ROOTD/chef-solo/solo.json<<EOF
{
  "run_list": [ "recipe[chef-server::default]" ]
}
EOF
fi

RANDOMPW=`cat /dev/urandom| tr -dc 'a-zA-Z0-9' | fold -w 10| head -n 1`
CHEFSEED="$CHEFS/files/default/chef-server.seed"
if [ ! -f $CHEFSEED ]; then
  echo "chef-server-webui chef-server-webui/admin_password password $RANDOMPW" >> $CHEFSEED
  echo "chef-solr chef-solr/amqp_password password $RANDOMPW" >> $CHEFSEED
fi

RECIPE="$CHEFS/recipes/default.rb"
if [ ! -f $RECIPE ]; then
  cat>$RECIPE<<EOF
package 'chef-server' do
action :install
  response_file "chef-server.seed"
end
EOF
fi

FRUN="$ROOTD/first_run.sh"
if [ ! -f $FRUN ]; then
  cat>$FRUN<<EOF
#!/bin/sh
apt-get update
CFDIR="/root/chef-solo"
update-grub
chef-solo -c \$CFDIR/solo.rb -j \$CFDIR/solo.json
sed -i 's,sh /root/first_run.sh,exit 0,' /etc/rc.local
reboot
EOF
fi

if [ ! -f $ROOTD/late_command.sh ]; then
  cat>$ROOTD/late_command.sh<<EOF
#!/bin/sh
mkdir /root/.ssh
chmod 700 /root/.ssh /root/first_run.sh
mv /root/authorized_keys /root/.ssh
chmod 400 /root/.ssh/authorized_keys
sed -i 's,quiet splash,quiet,' /etc/default/grub
echo 'GRUB_GFXPAYLOAD_LINUX=text' >> /etc/default/grub
sed -i 's,exit 0,sh /root/first_run.sh,' /etc/rc.local;
EOF
fi

# make the new initrd.gz
(cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/initrd.gz)

# iso it up
mkisofs -q -r -V "Custom Install" -cache-inodes -J -l -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
if [ ! -f $ISO ]; then
  echo "Create ISO failed." && exit 1
else
  if [ $KEEP ]; then
    echo "Temp dir: $TMPDIR"
  else
    rm -rf $TMPDIR
  fi
  echo "$ISO successfully created" && exit 0
fi
